% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/jam_groupstosedesign.R
\name{groups_to_sedesign}
\alias{groups_to_sedesign}
\title{Create SEDesign from experimental groups}
\usage{
groups_to_sedesign(
  ifactors,
  group_colnames = NULL,
  isamples = NULL,
  idesign = NULL,
  factor_order = NULL,
  omit_grep = "[-,]",
  max_depth = 2,
  factor_sep = "_",
  contrast_sep = "-",
  remove_pairs = NULL,
  pre_control_terms = NULL,
  add_contrastdf = NULL,
  contrast_names = NULL,
  current_depth = 1,
  rename_first_depth = TRUE,
  return_sedesign = TRUE,
  default_order = c("asis", "sort_samples", "mixedSort"),
  verbose = FALSE,
  ...
)
}
\arguments{
\item{ifactors}{\code{data.frame} or \code{character} vector.
\itemize{
\item When \code{data.frame} is supplied, each column is used as a
design factor, and rownames are recognized as sample identifiers.
\item When \code{character} vector is supplied, it is converted to
\code{data.frame} by splitting values with a delimiter
\code{factor_sep}, and names are recognized as sample identifiers.
}}

\item{group_colnames}{\code{character} vector or \code{NULL}, used to
define a subset of columns to use when \code{ifactors} is supplied
as a \code{data.frame}. When \code{ifactors} is supplied as a \code{character}
vector, this argument is used to define the \code{colnames}.}

\item{isamples}{\code{character} vector or \code{NULL}, optionally used to subset
the sample identifiers used in subsequent steps. Note that only
groups and contrasts that contain samples will be defined.}

\item{idesign}{\code{numeric} matrix or \code{NULL}, intended as an optional
method to use an existing design matrix.}

\item{factor_order}{\code{integer} or \code{character} vector, used to define a
specific order of factors when generating contrasts,  useful
when there are multiple experimental factors.
It can be helpful to force a secondary factor to be
compared before a primary factor especially in two-way contrasts.
Note that \code{factor_order} refers to the columns (factors) and not
the factor levels (not column values).}

\item{omit_grep}{\code{character} regular expression pattern used to
exclude secondary factors from contrasts.}

\item{max_depth}{\code{integer} value indicating the maximum depth of
statistical contrasts to create. For example \code{max_depth=2} will
allow two-way contrasts, and \code{max_depth=1} will only create
one-way contrasts.}

\item{factor_sep}{\code{character} string used as a
delimiter to separate experimental factors, when recognizing
or creating experimental group names.}

\item{contrast_sep}{\code{character} string used as a
delimiter to separate groups within each contrast name.}

\item{remove_pairs}{\code{list} of \code{character} vectors of factors
that should not be compared. Each \code{character} vector should
contain two factor levels for any given experimental factor,
where those two factor levels should not be compared in
the same pairwise contrast. For example, consider an experimental
factor defined \code{treatment <- c("control", "dex", "compoundx")}.
To prevent a direct comparison of \code{"dex"} to \code{"compoundx"},
use argument \code{remove_pairs=list(c("dex", "compoundx"))}.}

\item{pre_control_terms}{\code{character} vector used to
place factor levels first in the order of levels, so these
terms will be the denominator for contrasts. This approach
is useful when the input \code{ifactors} does not already contain
a \code{factor} with a specific order of factor levels.}

\item{add_contrastdf}{\code{data.frame} or \code{character} or \code{NULL},
intended to include a specific contrast in the output.
This argument is typically used during iterative processing,
and is not usually user-defined. It must contain}

\item{contrast_names}{\code{character} optional vector of specific
contrasts to use when creating the contrast matrix. When
\code{contrast_names=NULL} as default, the function defines contrasts
using its internal logic. When \code{contrast_names} is supplied,
only these \code{contrast_names} are used, with no other contrasts.}

\item{current_depth}{\code{integer} value used during iterative
operations of this function.}

\item{rename_first_depth}{\code{logical} value used during iterative
operations of this function.}

\item{return_sedesign}{\code{logical} used during iterative
operations of this function. When \code{return_sedesign=FALSE}
this function returns a \code{list}:
\itemize{
\item \code{"contrast_df"}: a \code{data.frame} as used in argument
\code{add_contrastdf}, which describes each unique contrast.
\item \code{"contrast_names"}: a \code{character} vector of contrast names,
which become \code{colnames()} of the contrast matrix.
\item \code{"idesign"}: a \code{numeric} design matrix as defined by the input data,
suitable for debugging purposes for example.
}}

\item{verbose}{\code{logical} indicating whether to print verbose output.}

\item{...}{additional arguments are ignored.}

\item{make_unique}{\code{logical} indicating whether to make output
contrasts unique.}
}
\value{
\code{SEDesign} object with the following slots:
\itemize{
\item \code{design}: \code{numeric} matrix with sample-to-group association
\item \code{contrasts}: \code{numeric} matrix with group-to-contrast association
\item \code{samples}: \code{character} vector that represents individual sample
replicates, equivalent to \code{rownames()} of the \code{design} matrix.
}
}
\description{
Create SEDesign from experimental groups
}
\details{
This function creates \code{SEDesign} with appropriate design
and contrasts, based upon experimental groups.
This approach will use multiple experimental factors
to create appropriate one-way and n-way contrasts,
where each contrast represents a symmetric comparison
of each independent factor.

Input can be provided in one of two ways:
\enumerate{
\item \code{SummarizedExperiment} where experiment design is derived from
\code{SummarizedExperiment::colData()} of the \code{se} object, and
uses columns defined by \code{group_colnames}. This input should be
equivalent to providing a \code{data.frame} whose \code{rownames()} are
equal to \code{colnames(se)}.
\item \code{data.frame} where each column represents a design factor.
\itemize{
\item An example of \code{data.frame} input:
}

\if{html}{\out{<div class="sourceCode R">}}\preformatted{ifactors <- data.frame(
   treatment=c("Control", "Control", "Treated", "Treated"),
   genotype=c("Wildtype", "Knockout", "Wildtype", "Knockout"))
}\if{html}{\out{</div>}}
\item \code{character} vector, where design factor levels are separated
by a delimiter such as underscore \code{"_"}. This input will be
converted to \code{data.frame} before processing.
\itemize{
\item An example of \code{character} input:
}

\if{html}{\out{<div class="sourceCode R">}}\preformatted{ifactors <- c(
   "Control_Wildtype",
   "Control_Knockout",
   "Treated_Wildtype",
   "Treated_Knockout")
}\if{html}{\out{</div>}}
}

When rownames are provided in the \code{data.frame}, or names
are provided with a \code{character} vector, they are retained
and used as sample identifiers.

Note:
This function will change any \code{"-"} in a factor name to
\code{"."} prior to detecting valid contrasts, in order to
prevent confusion and potential problems using the
contrast names in downstream analyses.
This step does not call \code{base::make.names()}, so that
step should be run beforehand if required.
\subsection{Troubleshooting}{
\itemize{
\item When this function returns no contrasts, or returns an unexpected
error during processing, it is most likely due to the limitation
of comparing one factor at a time. For example, the logic will
not define contrast \code{time1_treatment1-time2_treatment2}, because
this contrast changes two factors, it will only permit either
\code{time1_treatment1-time1_treatment2} or \code{time1_treatment1-time2_treatment1}.
\item \code{max_depth} and \code{factor_order} are used to define the order in
which factors are compared, but do not affect the order of factors
used for things like group names.
}
}
}
\examples{
# first define a vector of sample groups
igroups <- jamba::nameVector(paste(rep(c("WT", "KO"), each=6),
   rep(c("Control", "Treated"), each=3),
   sep="_"),
   suffix="_rep");
igroups <- factor(igroups, levels=unique(igroups));
igroups;

sedesign <- groups_to_sedesign(igroups);
design(sedesign);
contrasts(sedesign);

# plot the design and contrasts
plot_sedesign(sedesign)

# the two-way contrasts can be visibly flipped, since they are equivalent
plot_sedesign(sedesign, flip_twoway=TRUE)

# the design can be subset by sample
all_samples <- samples(sedesign)
subset_samples1 <- all_samples[-1:-3];
plot_sedesign(sedesign[subset_samples1, ])

# the group n=# replicates are updated
subset_samples2 <- all_samples[c(-1, -6, -11)];
plot_sedesign(sedesign[subset_samples2, ])

# The design * contrast matrix can be displayed in full
design(sedesign) \%*\%  contrasts(sedesign);

# make "KO" the control term instead of "WT"
contrast_names(groups_to_sedesign(igroups, pre_control_terms=c("KO")))

# change the order of factors compared
contrast_names(groups_to_sedesign(igroups, factor_order=2:1))

# prevent comparisons of WT to WT, or KO to KO
sedesign_2 <- groups_to_sedesign(as.character(igroups),
   remove_pairs=list(c("WT"), c("KO")))
contrast_names(sedesign_2)
plot_sedesign(sedesign_2)

# prevent comparisons of Treated to Treated, or Control to Control
sedesign_3 <- groups_to_sedesign(as.character(igroups),
   remove_pairs=list(c("Treated"), c("Control")))
contrast_names(sedesign_3)
plot_sedesign(sedesign_3)

# input as a data.frame with ordered factor levels
ifactors <- data.frame(Genotype=factor(c("WT","WT","KO","KO"),
   levels=c("WT","KO")),
   Treatment=factor(c("Treated","Control"),
      levels=c("Control","Treated")))
# not necessary, but define rownames
rownames(ifactors) <- jamba::pasteByRow(ifactors);
ifactors;
contrast_names(groups_to_sedesign(ifactors))
plot_sedesign(groups_to_sedesign(ifactors))

# you can still override factor levels with pre_control_terms
plot_sedesign(groups_to_sedesign(ifactors, pre_control_terms=c("KO")))

# input as design matrix
design_matrix <- design(groups_to_sedesign(ifactors))
design_matrix
contrast_names(groups_to_sedesign(design_matrix))

# again the "KO" group can be the control by using pre_control_terms
contrast_names(groups_to_sedesign(design_matrix, pre_control_terms="KO"))

# default_order="asis"
# contrasts show A-B, because B appears fist
# contrasts show Untreated-Treated because Treated appears first
df_test <- data.frame(
   set=c("B", "B", "A", "A"),
   treat=c("Treated", "Untreated"))
plot_sedesign(groups_to_sedesign(df_test))
plot_sedesign(groups_to_sedesign(jamba::pasteByRow(df_test)))

# default_order="sort_samples"
# contrasts show B-A, because A is sorted first
# contrasts show Treated-Untreated because sort_samples()
#    determines "Untreated" is a preferred control term
plot_sedesign(groups_to_sedesign(df_test,
   default_order="sort_samples"))

# default_order="mixedSort"
# contrasts show B-A, because A is sorted first
# contrasts show Untreated-Treated because Treated is sorted first
plot_sedesign(groups_to_sedesign(df_test,
   default_order="mixedSort"))
plot_sedesign(groups_to_sedesign(df_test,
   default_order="mixedSort",
   pre_control_terms=c("Untreated")))

}
\seealso{
Other jam experiment design: 
\code{\link{check_sedesign}()},
\code{\link{contrast2comp}()},
\code{\link{contrast_colors_by_group}()},
\code{\link{contrast_names_to_sedesign}()},
\code{\link{contrasts_to_factors}()},
\code{\link{contrasts_to_venn_setlists}()},
\code{\link{draw_oneway_contrast}()},
\code{\link{draw_twoway_contrast}()},
\code{\link{filter_contrast_names}()},
\code{\link{plot_sedesign}()},
\code{\link{sedesign_to_factors}()},
\code{\link{validate_sedesign}()}
}
\concept{jam experiment design}
